
// swiftlint:disable all
//
// @generated by ThemeGenie ðŸš€
// Developed by Divyansh Nema on 14/10/24
//
// Contents of this file were automatically generated
// Do not edit manually

import SwiftUI
import DVThemeKit 


extension FontAttributes {
    static let headlineH1Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH1), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let titleTitle1: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightTitle1), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeTitle1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let titleTitle2Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightTitle2), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeTitle2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let captionCaption2Caps: FontAttributes = FontAttributes(textCase: .upper, letterSpacing: ResolvedNumber(0.801), lineHeight: ResolvedNumber(CGFloat.lineheightCaption2), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeCaption2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let captionCaption1: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.52), lineHeight: ResolvedNumber(CGFloat.lineheightCaption1), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeCaption1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let headlineH4Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH4), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH4), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let bodyRegularParagraph: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.32), lineHeight: ResolvedNumber(CGFloat.lineheightH3), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeBody), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let bodyMedium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.32), lineHeight: ResolvedNumber(CGFloat.lineheightBody), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeBody), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let headlineH2: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH2), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let headlineH3: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH3), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH3), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let headlineH4Paragraph: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH3), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH4), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let headlineH4: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH4), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH4), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let displayMax: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(120.0), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeDisplayMax), decoration: TextDecoration.none, fontWeight: ResolvedNumber(400.0))

    static let subtitleButtonCaps: FontAttributes = FontAttributes(textCase: .upper, letterSpacing: ResolvedNumber(0.9), lineHeight: ResolvedNumber(CGFloat.lineheightSubtitle), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeSubtitle), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let titleTitle2: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightTitle2), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeTitle2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let subtitleRegular: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.301), lineHeight: ResolvedNumber(CGFloat.lineheightSubtitle), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeSubtitle), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let subtitleMedium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.301), lineHeight: ResolvedNumber(CGFloat.lineheightSubtitle), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeSubtitle), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let variantsFeedCardTitle: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH2), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeFeedCardTitle), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let headlineH3Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH3), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH3), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let variantsDetailPageTitle: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightDetailPageTitle), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeDetailPageTitle), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let titleTitle1Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightTitle1), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeTitle1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let bodyRegular: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.32), lineHeight: ResolvedNumber(CGFloat.lineheightBody), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeBody), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let captionCaption1Caps: FontAttributes = FontAttributes(textCase: .upper, letterSpacing: ResolvedNumber(1.04), lineHeight: ResolvedNumber(CGFloat.lineheightCaption1), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeCaption1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let headlineH1: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH1), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let captionCaption1Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.52), lineHeight: ResolvedNumber(CGFloat.lineheightCaption1), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeCaption1), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))

    static let captionCaption2: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightCaption2), fontPostScriptName: "PPNeueMontreal-Book", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeCaption2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightbook))

    static let headlineH2Medium: FontAttributes = FontAttributes(textCase: .original, letterSpacing: ResolvedNumber(0.0), lineHeight: ResolvedNumber(CGFloat.lineheightH2), fontPostScriptName: "PPNeueMontreal-Medium", fontFamily: ResolvedString(String.fontfamilyPPNeueMontreal), fontStyle: ResolvedString("PP Neue Montreal"), fontSize: ResolvedNumber(CGFloat.fontsizeH2), decoration: TextDecoration.none, fontWeight: ResolvedNumber(CGFloat.fontweightmedium))


}
extension PaintStyles {
    static let profileCardsColor2: PaintStyles = [PaintStyle(solid: SolidPaint(color: ResolvedColor("#5F5851".getColor()), blendMode: .normal), gradient: nil)]

    static let effectTextFade: PaintStyles = [PaintStyle(solid: nil, gradient: GradientPaint(gradientType: .linear, gradientColors: [ResolvedColor("#FFFFFF00".getColor()), ResolvedColor("#FFFFFFCC".getColor())], gradientLocations: [0.25, 0.75], blendMode: .normal, startPoint: CGPoint(x: 1.001, y: 0.278), endPoint: CGPoint(x: -0.0, y: 0.278), startRadius: nil, endRadius: nil, gradientOpacity: 1.0, rotationValue: 0.0))]

    static let effectGradientonButton: PaintStyles = [PaintStyle(solid: nil, gradient: GradientPaint(gradientType: .linear, gradientColors: [ResolvedColor("#00000000".getColor()), ResolvedColor("#000000".getColor())], gradientLocations: [0.0, 1.0], blendMode: .normal, startPoint: CGPoint(x: 0.5, y: 0.0), endPoint: CGPoint(x: 0.5, y: 1.0), startRadius: nil, endRadius: nil, gradientOpacity: 1.0, rotationValue: 0.0))]

    static let effectStrokeOutline: PaintStyles = [PaintStyle(solid: nil, gradient: GradientPaint(gradientType: .linear, gradientColors: [ResolvedColor("#FFFFFF40".getColor()), ResolvedColor("#FFFFFF1A".getColor())], gradientLocations: [0.0, 1.0], blendMode: .normal, startPoint: CGPoint(x: 0.0, y: 0.0), endPoint: CGPoint(x: 1.0, y: 1.0), startRadius: nil, endRadius: nil, gradientOpacity: 1.0, rotationValue: 0.0))]

    static let profileCardsColor1: PaintStyles = [PaintStyle(solid: SolidPaint(color: ResolvedColor("#C8C0B4".getColor()), blendMode: .normal), gradient: nil)]

    static let photoGradientBottom: PaintStyles = [PaintStyle(solid: nil, gradient: GradientPaint(gradientType: .linear, gradientColors: [ResolvedColor("#00000000".getColor()), ResolvedColor("#00000099".getColor()), ResolvedColor("#000000B2".getColor())], gradientLocations: [0.2, 0.598, 0.898], blendMode: .normal, startPoint: CGPoint(x: 0.5, y: -0.0), endPoint: CGPoint(x: 0.5, y: 1.0), startRadius: nil, endRadius: nil, gradientOpacity: 1.0, rotationValue: 0.0))]

    static let photoPropertyPhotoBG: PaintStyles = []

    static let needtoRemoveTempStyle1: PaintStyles = [PaintStyle(solid: nil, gradient: GradientPaint(gradientType: .radial, gradientColors: [ResolvedColor(Color.textPrimaryText), ResolvedColor(Color.textColoredText), ResolvedColor(Color.colorBrandSecondary60Percent)], gradientLocations: [0.13, 0.34, 0.88], blendMode: .normal, startPoint: CGPoint(x: 0.5, y: 0.5), endPoint: nil, startRadius: 0.0, endRadius: 0.5, gradientOpacity: 1.0, rotationValue: 0.0))]


}
extension Effects {
    static let shadowElevation1baseline: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityBaseline), shadowOffset: CGPoint(x: 0.0, y: 4.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(16.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 50.0)])

    static let glowGlowIcon: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor("#FFFFFF00".getColor()), shadowOffset: CGPoint(x: 0.0, y: 0.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(8.0))], blurs: [])

    static let blurPopovers: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityPopovers), shadowOffset: CGPoint(x: 0.0, y: 40.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(100.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 100.0)])

    static let coloredFieldFocus: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor("#DE9B2E1F".getColor()), shadowOffset: CGPoint(x: 0.0, y: 0.0), shadowRadius: ResolvedNumber(4.0), shadowBlur: ResolvedNumber(0.0)), Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor("#C29A5ABF".getColor()), shadowOffset: CGPoint(x: 0.0, y: 0.0), shadowRadius: ResolvedNumber(1.0), shadowBlur: ResolvedNumber(1.0))], blurs: [])

    static let shadowElevation3dramatic: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityDramatic), shadowOffset: CGPoint(x: 0.0, y: 12.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(32.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 75.0)])

    static let coloredGlow: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor("#C8B86300".getColor()), shadowOffset: CGPoint(x: 0.0, y: 4.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(16.0))], blurs: [])

    static let needtoRemoveTempEffectStyle1: Effects = Effects(shadows: [Shadow(shadowType: .inner, blendMode: .normal, shadowColor: ResolvedColor(Color.systemAlwaysBlack), shadowOffset: CGPoint(x: 12.0, y: 16.0), shadowRadius: ResolvedNumber(CGFloat.roundnessBaseline), shadowBlur: ResolvedNumber(CGFloat.roundnessBaseline)), Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.colorBrandAccent), shadowOffset: CGPoint(x: 8.0, y: 24.0), shadowRadius: ResolvedNumber(CGFloat.roundnessCard), shadowBlur: ResolvedNumber(CGFloat.roundnessCard))], blurs: [Blur(blurType: .backgroundBlur, radius: 24.0), Blur(blurType: .layerBlur, radius: 16.0)])

    static let blurPhotoBG: Effects = Effects(shadows: [], blurs: [Blur(blurType: .layerBlur, radius: 40.0)])

    static let blur50: Effects = Effects(shadows: [], blurs: [Blur(blurType: .backgroundBlur, radius: 50.0)])

    static let blurPanel: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityPanel), shadowOffset: CGPoint(x: 0.0, y: 0.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(60.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 100.0)])

    static let blurNavScroll: Effects = Effects(shadows: [], blurs: [Blur(blurType: .backgroundBlur, radius: 50.0), Blur(blurType: .layerBlur, radius: 10.0)])

    static let shadowElevation2stronger: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityStronger), shadowOffset: CGPoint(x: 0.0, y: 8.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(16.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 75.0)])

    static let shadowElevation0faint: Effects = Effects(shadows: [Shadow(shadowType: .drop, blendMode: .normal, shadowColor: ResolvedColor(Color.shadowOpacityFaint), shadowOffset: CGPoint(x: 0.0, y: 4.0), shadowRadius: ResolvedNumber(0.0), shadowBlur: ResolvedNumber(12.0))], blurs: [Blur(blurType: .backgroundBlur, radius: 50.0)])


}
// swiftlint:enable all
